{"remainingRequest":"D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Work\\TaskForPractice-main\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Work\\TaskForPractice-main\\src\\views\\About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"D:\\Work\\TaskForPractice-main\\src\\views\\About.vue","mtime":1644487191000},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644321852637},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1644321865726},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644321852637},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\index.js","mtime":1644321865726}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}