{"remainingRequest":"D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Work\\TaskForPractice-main\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Work\\TaskForPractice-main\\src\\views\\Dormitory.vue?vue&type=template&id=8c002b4a&","dependencies":[{"path":"D:\\Work\\TaskForPractice-main\\src\\views\\Dormitory.vue","mtime":1644487191000},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644321241446},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1644321254778},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644321241446},{"path":"D:\\Work\\TaskForPractice-main\\node_modules\\vue-loader\\lib\\index.js","mtime":1644321254778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}